/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface WyvernExchangeAbiInterface extends utils.Interface {
  contractName: "WyvernExchangeAbi";
  functions: {
    "approveOrderHash_(bytes32)": FunctionFragment;
    "approveOrder_(address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "approved(address,bytes32)": FunctionFragment;
    "atomicMatch_(uint256[16],bytes4[2],bytes,bytes,bytes,bytes,uint8[2],bytes32,bytes)": FunctionFragment;
    "codename()": FunctionFragment;
    "fills(address,bytes32)": FunctionFragment;
    "hashOrder_(address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256)": FunctionFragment;
    "hashToSign_(bytes32)": FunctionFragment;
    "name()": FunctionFragment;
    "registries(address)": FunctionFragment;
    "setOrderFill_(bytes32,uint256)": FunctionFragment;
    "validateOrderAuthorization_(bytes32,address,bytes)": FunctionFragment;
    "validateOrderParameters_(address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveOrderHash_",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveOrder_",
    values: [
      string,
      string,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approved",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "atomicMatch_",
    values: [
      BigNumberish[],
      [BytesLike, BytesLike],
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      [BigNumberish, BigNumberish],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "codename", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fills",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder_",
    values: [
      string,
      string,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashToSign_",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "registries", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOrderFill_",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrderAuthorization_",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrderParameters_",
    values: [
      string,
      string,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "approveOrderHash_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveOrder_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "atomicMatch_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "codename", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fills", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashOrder_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashToSign_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOrderFill_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrderAuthorization_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrderParameters_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "OrderApproved(bytes32,address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "OrderFillChanged(bytes32,address,uint256)": EventFragment;
    "OrdersMatched(bytes32,bytes32,address,address,uint256,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFillChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrdersMatched"): EventFragment;
}

export type OrderApprovedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ],
  {
    hash: string;
    registry: string;
    maker: string;
    staticTarget: string;
    staticSelector: string;
    staticExtradata: string;
    maximumFill: BigNumber;
    listingTime: BigNumber;
    expirationTime: BigNumber;
    salt: BigNumber;
    orderbookInclusionDesired: boolean;
  }
>;

export type OrderApprovedEventFilter = TypedEventFilter<OrderApprovedEvent>;

export type OrderFillChangedEvent = TypedEvent<
  [string, string, BigNumber],
  { hash: string; maker: string; newFill: BigNumber }
>;

export type OrderFillChangedEventFilter =
  TypedEventFilter<OrderFillChangedEvent>;

export type OrdersMatchedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, string],
  {
    firstHash: string;
    secondHash: string;
    firstMaker: string;
    secondMaker: string;
    newFirstFill: BigNumber;
    newSecondFill: BigNumber;
    metadata: string;
  }
>;

export type OrdersMatchedEventFilter = TypedEventFilter<OrdersMatchedEvent>;

export interface WyvernExchangeAbi extends BaseContract {
  contractName: "WyvernExchangeAbi";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WyvernExchangeAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveOrderHash_(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      orderbookInclusionDesired: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approved(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    atomicMatch_(
      uints: BigNumberish[],
      staticSelectors: [BytesLike, BytesLike],
      firstExtradata: BytesLike,
      firstCalldata: BytesLike,
      secondExtradata: BytesLike,
      secondCalldata: BytesLike,
      howToCalls: [BigNumberish, BigNumberish],
      metadata: BytesLike,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    codename(overrides?: CallOverrides): Promise<[string]>;

    fills(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    hashToSign_(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    registries(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    setOrderFill_(
      hash: BytesLike,
      fill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateOrderAuthorization_(
      hash: BytesLike,
      maker: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateOrderParameters_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  approveOrderHash_(
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveOrder_(
    registry: string,
    maker: string,
    staticTarget: string,
    staticSelector: BytesLike,
    staticExtradata: BytesLike,
    maximumFill: BigNumberish,
    listingTime: BigNumberish,
    expirationTime: BigNumberish,
    salt: BigNumberish,
    orderbookInclusionDesired: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approved(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  atomicMatch_(
    uints: BigNumberish[],
    staticSelectors: [BytesLike, BytesLike],
    firstExtradata: BytesLike,
    firstCalldata: BytesLike,
    secondExtradata: BytesLike,
    secondCalldata: BytesLike,
    howToCalls: [BigNumberish, BigNumberish],
    metadata: BytesLike,
    signatures: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  codename(overrides?: CallOverrides): Promise<string>;

  fills(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashOrder_(
    registry: string,
    maker: string,
    staticTarget: string,
    staticSelector: BytesLike,
    staticExtradata: BytesLike,
    maximumFill: BigNumberish,
    listingTime: BigNumberish,
    expirationTime: BigNumberish,
    salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  hashToSign_(orderHash: BytesLike, overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  registries(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  setOrderFill_(
    hash: BytesLike,
    fill: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateOrderAuthorization_(
    hash: BytesLike,
    maker: string,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateOrderParameters_(
    registry: string,
    maker: string,
    staticTarget: string,
    staticSelector: BytesLike,
    staticExtradata: BytesLike,
    maximumFill: BigNumberish,
    listingTime: BigNumberish,
    expirationTime: BigNumberish,
    salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    approveOrderHash_(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    approveOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      orderbookInclusionDesired: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    approved(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    atomicMatch_(
      uints: BigNumberish[],
      staticSelectors: [BytesLike, BytesLike],
      firstExtradata: BytesLike,
      firstCalldata: BytesLike,
      secondExtradata: BytesLike,
      secondCalldata: BytesLike,
      howToCalls: [BigNumberish, BigNumberish],
      metadata: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    codename(overrides?: CallOverrides): Promise<string>;

    fills(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    hashToSign_(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    registries(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    setOrderFill_(
      hash: BytesLike,
      fill: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateOrderAuthorization_(
      hash: BytesLike,
      maker: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateOrderParameters_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OrderApproved(bytes32,address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256,bool)"(
      hash?: BytesLike | null,
      registry?: null,
      maker?: string | null,
      staticTarget?: null,
      staticSelector?: null,
      staticExtradata?: null,
      maximumFill?: null,
      listingTime?: null,
      expirationTime?: null,
      salt?: null,
      orderbookInclusionDesired?: null
    ): OrderApprovedEventFilter;
    OrderApproved(
      hash?: BytesLike | null,
      registry?: null,
      maker?: string | null,
      staticTarget?: null,
      staticSelector?: null,
      staticExtradata?: null,
      maximumFill?: null,
      listingTime?: null,
      expirationTime?: null,
      salt?: null,
      orderbookInclusionDesired?: null
    ): OrderApprovedEventFilter;

    "OrderFillChanged(bytes32,address,uint256)"(
      hash?: BytesLike | null,
      maker?: string | null,
      newFill?: null
    ): OrderFillChangedEventFilter;
    OrderFillChanged(
      hash?: BytesLike | null,
      maker?: string | null,
      newFill?: null
    ): OrderFillChangedEventFilter;

    "OrdersMatched(bytes32,bytes32,address,address,uint256,uint256,bytes32)"(
      firstHash?: null,
      secondHash?: null,
      firstMaker?: string | null,
      secondMaker?: string | null,
      newFirstFill?: null,
      newSecondFill?: null,
      metadata?: BytesLike | null
    ): OrdersMatchedEventFilter;
    OrdersMatched(
      firstHash?: null,
      secondHash?: null,
      firstMaker?: string | null,
      secondMaker?: string | null,
      newFirstFill?: null,
      newSecondFill?: null,
      metadata?: BytesLike | null
    ): OrdersMatchedEventFilter;
  };

  estimateGas: {
    approveOrderHash_(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      orderbookInclusionDesired: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approved(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    atomicMatch_(
      uints: BigNumberish[],
      staticSelectors: [BytesLike, BytesLike],
      firstExtradata: BytesLike,
      firstCalldata: BytesLike,
      secondExtradata: BytesLike,
      secondCalldata: BytesLike,
      howToCalls: [BigNumberish, BigNumberish],
      metadata: BytesLike,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    codename(overrides?: CallOverrides): Promise<BigNumber>;

    fills(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashToSign_(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    registries(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setOrderFill_(
      hash: BytesLike,
      fill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateOrderAuthorization_(
      hash: BytesLike,
      maker: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateOrderParameters_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveOrderHash_(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      orderbookInclusionDesired: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approved(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    atomicMatch_(
      uints: BigNumberish[],
      staticSelectors: [BytesLike, BytesLike],
      firstExtradata: BytesLike,
      firstCalldata: BytesLike,
      secondExtradata: BytesLike,
      secondCalldata: BytesLike,
      howToCalls: [BigNumberish, BigNumberish],
      metadata: BytesLike,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    codename(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fills(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashToSign_(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOrderFill_(
      hash: BytesLike,
      fill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateOrderAuthorization_(
      hash: BytesLike,
      maker: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateOrderParameters_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
