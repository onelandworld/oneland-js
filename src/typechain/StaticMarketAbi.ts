/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StaticMarketAbiInterface extends utils.Interface {
  contractName: "StaticMarketAbi";
  functions: {
    "ERC20ForERC721(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "ERC721ForERC20(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "anyERC1155ForERC20(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "anyERC20ForERC1155(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "anyERC20ForERC20(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "name()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ERC20ForERC721",
    values: [
      BytesLike,
      string[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721ForERC20",
    values: [
      BytesLike,
      string[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anyERC1155ForERC20",
    values: [
      BytesLike,
      string[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anyERC20ForERC1155",
    values: [
      BytesLike,
      string[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anyERC20ForERC20",
    values: [
      BytesLike,
      string[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ERC20ForERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721ForERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anyERC1155ForERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anyERC20ForERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anyERC20ForERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;

  events: {};
}

export interface StaticMarketAbi extends BaseContract {
  contractName: "StaticMarketAbi";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StaticMarketAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC20ForERC721(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ERC721ForERC20(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    anyERC1155ForERC20(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    anyERC20ForERC1155(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    anyERC20ForERC20(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;
  };

  ERC20ForERC721(
    extra: BytesLike,
    addresses: string[],
    howToCalls: [BigNumberish, BigNumberish],
    uints: BigNumberish[],
    data: BytesLike,
    counterdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ERC721ForERC20(
    extra: BytesLike,
    addresses: string[],
    howToCalls: [BigNumberish, BigNumberish],
    uints: BigNumberish[],
    data: BytesLike,
    counterdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  anyERC1155ForERC20(
    extra: BytesLike,
    addresses: string[],
    howToCalls: [BigNumberish, BigNumberish],
    uints: BigNumberish[],
    data: BytesLike,
    counterdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  anyERC20ForERC1155(
    extra: BytesLike,
    addresses: string[],
    howToCalls: [BigNumberish, BigNumberish],
    uints: BigNumberish[],
    data: BytesLike,
    counterdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  anyERC20ForERC20(
    extra: BytesLike,
    addresses: string[],
    howToCalls: [BigNumberish, BigNumberish],
    uints: BigNumberish[],
    data: BytesLike,
    counterdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ERC20ForERC721(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ERC721ForERC20(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyERC1155ForERC20(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyERC20ForERC1155(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyERC20ForERC20(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ERC20ForERC721(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ERC721ForERC20(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyERC1155ForERC20(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyERC20ForERC1155(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyERC20ForERC20(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC20ForERC721(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC721ForERC20(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anyERC1155ForERC20(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anyERC20ForERC1155(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anyERC20ForERC20(
      extra: BytesLike,
      addresses: string[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
