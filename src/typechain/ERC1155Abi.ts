/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ERC1155AbiInterface extends utils.Interface {
  contractName: "ERC1155Abi";
  functions: {
    "supportsInterface(bytes4)": FunctionFragment;
    "create(string,uint256,uint256,address,uint256,uint16,uint8,uint256[3],bool)": FunctionFragment;
    "minMeltValue(uint256)": FunctionFragment;
    "mintFungibles(uint256,address[],uint256[])": FunctionFragment;
    "mintNonFungibles(uint256,address[])": FunctionFragment;
    "mintNonFungiblesWithData(uint256,address[],uint128[])": FunctionFragment;
    "reserve(uint256)": FunctionFragment;
    "releaseReserve(uint256,uint128)": FunctionFragment;
    "updateName(uint256,string)": FunctionFragment;
    "assign(uint256,address)": FunctionFragment;
    "acceptAssignment(uint256)": FunctionFragment;
    "setWhitelisted(uint256,address,address,bool)": FunctionFragment;
    "setTransferable(uint256,uint8)": FunctionFragment;
    "setMeltFee(uint256,uint16)": FunctionFragment;
    "decreaseMaxMeltFee(uint256,uint16)": FunctionFragment;
    "setTransferFee(uint256,uint256)": FunctionFragment;
    "decreaseMaxTransferFee(uint256,uint256)": FunctionFragment;
    "deployERC20Adapter(uint256,uint8,string)": FunctionFragment;
    "deployERC721Adapter(uint256,string)": FunctionFragment;
    "addLog(uint256,string)": FunctionFragment;
    "typeCount()": FunctionFragment;
    "typeByIndex(uint256)": FunctionFragment;
    "nonFungibleTypeCount()": FunctionFragment;
    "nonFungibleTypeByIndex(uint256)": FunctionFragment;
    "fungibleTypeCount()": FunctionFragment;
    "fungibleTypeByIndex(uint256)": FunctionFragment;
    "typeData(uint256)": FunctionFragment;
    "transferSettings(uint256)": FunctionFragment;
    "isCreatorOf(uint256,address)": FunctionFragment;
    "whitelisted(uint256,address,address)": FunctionFragment;
    "name(uint256)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "mintableSupply(uint256)": FunctionFragment;
    "circulatingSupply(uint256)": FunctionFragment;
    "balanceOf(uint256,address)": FunctionFragment;
    "decimals(uint256)": FunctionFragment;
    "symbol(uint256)": FunctionFragment;
    "getERC20Adapter(uint256)": FunctionFragment;
    "getERC721Adapter(uint256)": FunctionFragment;
    "transfer(address,uint256,uint256)": FunctionFragment;
    "safeTransfer(address,uint256,uint256,bytes)": FunctionFragment;
    "transferAdapter(address,uint256,uint256,address)": FunctionFragment;
    "transferFrom(address,address,uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "transferFromAdapter(address,address,uint256,uint256,address)": FunctionFragment;
    "batchTransfer(address,uint256[],uint256[])": FunctionFragment;
    "safeBatchTransfer(address,uint256[],uint256[],bytes)": FunctionFragment;
    "batchTransferFrom(address,address,uint256[],uint256[])": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "multicastTransfer(address[],uint256[],uint256[])": FunctionFragment;
    "safeMulticastTransfer(address[],uint256[],uint256[],bytes)": FunctionFragment;
    "multicastTransferFrom(address[],address[],uint256[],uint256[])": FunctionFragment;
    "allowance(uint256,address,address)": FunctionFragment;
    "approve(address,uint256,uint256,uint256)": FunctionFragment;
    "approveAdapter(address,uint256,uint256,uint256,address)": FunctionFragment;
    "batchApprove(address,uint256[],uint256[],uint256[])": FunctionFragment;
    "setApproval(address,uint256[],bool)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setApprovalAdapter(address,uint256,bool,address)": FunctionFragment;
    "isApproved(address,address,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "transferFees(uint256,uint256,address,address)": FunctionFragment;
    "createTrade(uint256[],uint128[],uint256[],uint128[],address)": FunctionFragment;
    "tradeCompletable(uint256)": FunctionFragment;
    "completeTrade(uint256)": FunctionFragment;
    "cancelTrade(uint256)": FunctionFragment;
    "melt(uint256[],uint256[])": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "setURI(uint256,string)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "nonFungibleCount(uint256)": FunctionFragment;
    "nonFungibleByIndex(uint256,uint256)": FunctionFragment;
    "nonFungibleOfOwnerByIndex(uint256,address,uint256)": FunctionFragment;
    "isNonFungible(uint256)": FunctionFragment;
    "isContract(address)": FunctionFragment;
    "releaseERC20(address,address,uint256)": FunctionFragment;
    "releaseETH(address,uint256)": FunctionFragment;
    "releaseERC721(address,address,uint256)": FunctionFragment;
    "releaseERC1155(address,address,uint256,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "retire(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish],
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minMeltValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFungibles",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNonFungibles",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNonFungiblesWithData",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reserve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseReserve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateName",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "assign",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAssignment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelisted",
    values: [BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferable",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMeltFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseMaxMeltFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseMaxTransferFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployERC20Adapter",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployERC721Adapter",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLog",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "typeCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "typeByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonFungibleTypeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonFungibleTypeByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fungibleTypeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fungibleTypeByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "typeData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSettings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCreatorOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelisted",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintableSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "circulatingSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "symbol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC20Adapter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC721Adapter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransfer",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdapter",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromAdapter",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransfer",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransfer",
    values: [string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicastTransfer",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMulticastTransfer",
    values: [string[], BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicastTransferFrom",
    values: [string[], string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAdapter",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchApprove",
    values: [string, BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval",
    values: [string, BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalAdapter",
    values: [string, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFees",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTrade",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeCompletable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "melt",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nonFungibleCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonFungibleByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonFungibleOfOwnerByIndex",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNonFungible",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isContract", values: [string]): string;
  encodeFunctionData(
    functionFragment: "releaseERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseETH",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseERC721",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseERC1155",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "retire", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minMeltValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFungibles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNonFungibles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNonFungiblesWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptAssignment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMeltFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseMaxMeltFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseMaxTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployERC20Adapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployERC721Adapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addLog", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "typeCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "typeByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonFungibleTypeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonFungibleTypeByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fungibleTypeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fungibleTypeByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "typeData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCreatorOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintableSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circulatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getERC20Adapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC721Adapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multicastTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeMulticastTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multicastTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeCompletable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "melt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonFungibleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonFungibleByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonFungibleOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNonFungible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isContract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "releaseETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "retire", data: BytesLike): Result;

  events: {
    "Approval(uint256,address,address,uint256)": EventFragment;
    "Initialize(uint256,address,address)": EventFragment;
    "Retire(uint256,address)": EventFragment;
    "Log(uint256,address,string)": EventFragment;
    "UpdateDecimals(uint256)": EventFragment;
    "UpdateName(uint256)": EventFragment;
    "UpdateSymbol(uint256)": EventFragment;
    "SetURI(uint256,string)": EventFragment;
    "Assign(uint256,address,address)": EventFragment;
    "AcceptAssignment(uint256,address)": EventFragment;
    "Create(uint256,address,bool)": EventFragment;
    "Mint(uint256,uint256)": EventFragment;
    "UpdateMaxMeltFee(uint256)": EventFragment;
    "UpdateMeltFee(uint256)": EventFragment;
    "OperatorApproval(address,address,uint256,bool)": EventFragment;
    "Transfer(uint256,address,address,uint256)": EventFragment;
    "TransferFee(uint256,address,uint256,uint256)": EventFragment;
    "UpdateMaxTransferFee(uint256)": EventFragment;
    "UpdateTransferable(uint256)": EventFragment;
    "UpdateTransferFee(uint256)": EventFragment;
    "Whitelist(uint256,address,address,bool)": EventFragment;
    "Melt(uint256,address,uint256)": EventFragment;
    "DeployERCAdapter(uint256,address)": EventFragment;
    "CreateTrade(uint256,address,address,uint256)": EventFragment;
    "CompleteTrade(uint256,address,address,uint256,uint256,uint256)": EventFragment;
    "CancelTrade(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Retire"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDecimals"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSymbol"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Assign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AcceptAssignment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Create"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxMeltFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMeltFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxTransferFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTransferable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTransferFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Whitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Melt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployERCAdapter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompleteTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelTrade"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { _id: BigNumber; _owner: string; _spender: string; _value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type InitializeEvent = TypedEvent<
  [BigNumber, string, string],
  { _block: BigNumber; _storage: string; _oldContract: string }
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export type RetireEvent = TypedEvent<
  [BigNumber, string],
  { _block: BigNumber; _nextContract: string }
>;

export type RetireEventFilter = TypedEventFilter<RetireEvent>;

export type LogEvent = TypedEvent<
  [BigNumber, string, string],
  { _id: BigNumber; _from: string; _data: string }
>;

export type LogEventFilter = TypedEventFilter<LogEvent>;

export type UpdateDecimalsEvent = TypedEvent<[BigNumber], { _id: BigNumber }>;

export type UpdateDecimalsEventFilter = TypedEventFilter<UpdateDecimalsEvent>;

export type UpdateNameEvent = TypedEvent<[BigNumber], { _id: BigNumber }>;

export type UpdateNameEventFilter = TypedEventFilter<UpdateNameEvent>;

export type UpdateSymbolEvent = TypedEvent<[BigNumber], { _id: BigNumber }>;

export type UpdateSymbolEventFilter = TypedEventFilter<UpdateSymbolEvent>;

export type SetURIEvent = TypedEvent<
  [BigNumber, string],
  { _id: BigNumber; _uri: string }
>;

export type SetURIEventFilter = TypedEventFilter<SetURIEvent>;

export type AssignEvent = TypedEvent<
  [BigNumber, string, string],
  { _id: BigNumber; _from: string; _to: string }
>;

export type AssignEventFilter = TypedEventFilter<AssignEvent>;

export type AcceptAssignmentEvent = TypedEvent<
  [BigNumber, string],
  { _id: BigNumber; _creator: string }
>;

export type AcceptAssignmentEventFilter =
  TypedEventFilter<AcceptAssignmentEvent>;

export type CreateEvent = TypedEvent<
  [BigNumber, string, boolean],
  { _id: BigNumber; _creator: string; _isNonFungible: boolean }
>;

export type CreateEventFilter = TypedEventFilter<CreateEvent>;

export type MintEvent = TypedEvent<
  [BigNumber, BigNumber],
  { _id: BigNumber; _value: BigNumber }
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export type UpdateMaxMeltFeeEvent = TypedEvent<[BigNumber], { _id: BigNumber }>;

export type UpdateMaxMeltFeeEventFilter =
  TypedEventFilter<UpdateMaxMeltFeeEvent>;

export type UpdateMeltFeeEvent = TypedEvent<[BigNumber], { _id: BigNumber }>;

export type UpdateMeltFeeEventFilter = TypedEventFilter<UpdateMeltFeeEvent>;

export type OperatorApprovalEvent = TypedEvent<
  [string, string, BigNumber, boolean],
  { _owner: string; _operator: string; _id: BigNumber; _approved: boolean }
>;

export type OperatorApprovalEventFilter =
  TypedEventFilter<OperatorApprovalEvent>;

export type TransferEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { _id: BigNumber; _from: string; _to: string; _value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type TransferFeeEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  { _id: BigNumber; _sender: string; _feeId: BigNumber; _feeValue: BigNumber }
>;

export type TransferFeeEventFilter = TypedEventFilter<TransferFeeEvent>;

export type UpdateMaxTransferFeeEvent = TypedEvent<
  [BigNumber],
  { _id: BigNumber }
>;

export type UpdateMaxTransferFeeEventFilter =
  TypedEventFilter<UpdateMaxTransferFeeEvent>;

export type UpdateTransferableEvent = TypedEvent<
  [BigNumber],
  { _id: BigNumber }
>;

export type UpdateTransferableEventFilter =
  TypedEventFilter<UpdateTransferableEvent>;

export type UpdateTransferFeeEvent = TypedEvent<
  [BigNumber],
  { _id: BigNumber }
>;

export type UpdateTransferFeeEventFilter =
  TypedEventFilter<UpdateTransferFeeEvent>;

export type WhitelistEvent = TypedEvent<
  [BigNumber, string, string, boolean],
  { _id: BigNumber; _account: string; _whitelisted: string; _on: boolean }
>;

export type WhitelistEventFilter = TypedEventFilter<WhitelistEvent>;

export type MeltEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { _id: BigNumber; _owner: string; _value: BigNumber }
>;

export type MeltEventFilter = TypedEventFilter<MeltEvent>;

export type DeployERCAdapterEvent = TypedEvent<
  [BigNumber, string],
  { _id: BigNumber; _sender: string }
>;

export type DeployERCAdapterEventFilter =
  TypedEventFilter<DeployERCAdapterEvent>;

export type CreateTradeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  {
    _tradeId: BigNumber;
    _firstParty: string;
    _secondParty: string;
    _escrowedEnjFirstParty: BigNumber;
  }
>;

export type CreateTradeEventFilter = TypedEventFilter<CreateTradeEvent>;

export type CompleteTradeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  {
    _tradeId: BigNumber;
    _firstParty: string;
    _secondParty: string;
    _receivedEnjFirstParty: BigNumber;
    _changeEnjFirstParty: BigNumber;
    _receivedEnjSecondParty: BigNumber;
  }
>;

export type CompleteTradeEventFilter = TypedEventFilter<CompleteTradeEvent>;

export type CancelTradeEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  {
    _tradeId: BigNumber;
    _firstParty: string;
    _receivedEnjFirstParty: BigNumber;
  }
>;

export type CancelTradeEventFilter = TypedEventFilter<CancelTradeEvent>;

export interface ERC1155Abi extends BaseContract {
  contractName: "ERC1155Abi";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC1155AbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    create(
      _name: string,
      _totalSupply: BigNumberish,
      _initialReserve: BigNumberish,
      _supplyModel: string,
      _meltValue: BigNumberish,
      _meltFeeRatio: BigNumberish,
      _transferable: BigNumberish,
      _transferFeeSettings: [BigNumberish, BigNumberish, BigNumberish],
      _nonFungible: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minMeltValue(
      _initialReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintFungibles(
      _id: BigNumberish,
      _to: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintNonFungibles(
      _id: BigNumberish,
      _to: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintNonFungiblesWithData(
      _id: BigNumberish,
      _to: string[],
      _data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseReserve(
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateName(
      _id: BigNumberish,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assign(
      _id: BigNumberish,
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptAssignment(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelisted(
      _id: BigNumberish,
      _account: string,
      _whitelisted: string,
      _on: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferable(
      _id: BigNumberish,
      _transferable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMeltFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseMaxMeltFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseMaxTransferFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployERC20Adapter(
      _id: BigNumberish,
      _decimals: BigNumberish,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployERC721Adapter(
      _id: BigNumberish,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLog(
      _id: BigNumberish,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    typeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    typeByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _id: BigNumber }>;

    nonFungibleTypeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonFungibleTypeByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _id: BigNumber }>;

    fungibleTypeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    fungibleTypeByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _id: BigNumber }>;

    typeData(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        number,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        [BigNumber, BigNumber, BigNumber, BigNumber],
        boolean
      ] & {
        _name: string;
        _creator: string;
        _meltValue: BigNumber;
        _meltFeeRatio: number;
        _meltFeeMaxRatio: number;
        _supplyModel: string;
        _totalSupply: BigNumber;
        _circulatingSupply: BigNumber;
        _reserve: BigNumber;
        _transferable: number;
        _transferFeeData: [BigNumber, BigNumber, BigNumber, BigNumber];
        _nonFungible: boolean;
      }
    >;

    transferSettings(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber] & {
        _transferable: number;
        _transferFeeType: number;
        _transferFeeCurrency: BigNumber;
        _transferFeeValue: BigNumber;
        _transferFeeMaxValue: BigNumber;
      }
    >;

    isCreatorOf(
      _id: BigNumberish,
      _creator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelisted(
      _id: BigNumberish,
      _account: string,
      _whitelisted: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintableSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    circulatingSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      _id: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(_id: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    symbol(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getERC20Adapter(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getERC721Adapter(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transfer(
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransfer(
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAdapter(
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFromAdapter(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchTransfer(
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransfer(
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicastTransfer(
      _to: string[],
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeMulticastTransfer(
      _to: string[],
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicastTransferFrom(
      _from: string[],
      _to: string[],
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      _id: BigNumberish,
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      _spender: string,
      _id: BigNumberish,
      _currentValue: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveAdapter(
      _spender: string,
      _id: BigNumberish,
      _currentValue: BigNumberish,
      _value: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchApprove(
      _spender: string,
      _ids: BigNumberish[],
      _currentValues: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApproval(
      _operator: string,
      _ids: BigNumberish[],
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalAdapter(
      _operator: string,
      _id: BigNumberish,
      _approved: boolean,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApproved(
      _owner: string,
      _operator: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferFees(
      _id: BigNumberish,
      _value: BigNumberish,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _transferValue: BigNumber;
        _minTransferValue: BigNumber;
        _transferFeeCurrency: BigNumber;
        _fee: BigNumber;
        _maxFee: BigNumber;
      }
    >;

    createTrade(
      _askingIds: BigNumberish[],
      _askingValues: BigNumberish[],
      _offeringIds: BigNumberish[],
      _offeringValues: BigNumberish[],
      _secondParty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tradeCompletable(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    completeTrade(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelTrade(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    melt(
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOf(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setURI(
      _id: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    nonFungibleCount(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nonFungibleByIndex(
      _id: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nonFungibleOfOwnerByIndex(
      _id: BigNumberish,
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isNonFungible(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isContract(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    releaseERC20(
      _erc20ContractAddress: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseETH(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseERC721(
      _erc721ContractAddress: string,
      _to: string,
      _token: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseERC1155(
      _erc1155ContractAddress: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _storage: string,
      _oldContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retire(
      _nextContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  supportsInterface(
    _interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  create(
    _name: string,
    _totalSupply: BigNumberish,
    _initialReserve: BigNumberish,
    _supplyModel: string,
    _meltValue: BigNumberish,
    _meltFeeRatio: BigNumberish,
    _transferable: BigNumberish,
    _transferFeeSettings: [BigNumberish, BigNumberish, BigNumberish],
    _nonFungible: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minMeltValue(
    _initialReserve: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintFungibles(
    _id: BigNumberish,
    _to: string[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintNonFungibles(
    _id: BigNumberish,
    _to: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintNonFungiblesWithData(
    _id: BigNumberish,
    _to: string[],
    _data: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  releaseReserve(
    _id: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateName(
    _id: BigNumberish,
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assign(
    _id: BigNumberish,
    _creator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptAssignment(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelisted(
    _id: BigNumberish,
    _account: string,
    _whitelisted: string,
    _on: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferable(
    _id: BigNumberish,
    _transferable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMeltFee(
    _id: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseMaxMeltFee(
    _id: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferFee(
    _id: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseMaxTransferFee(
    _id: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployERC20Adapter(
    _id: BigNumberish,
    _decimals: BigNumberish,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployERC721Adapter(
    _id: BigNumberish,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLog(
    _id: BigNumberish,
    _data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  typeCount(overrides?: CallOverrides): Promise<BigNumber>;

  typeByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonFungibleTypeCount(overrides?: CallOverrides): Promise<BigNumber>;

  nonFungibleTypeByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fungibleTypeCount(overrides?: CallOverrides): Promise<BigNumber>;

  fungibleTypeByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  typeData(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      number,
      number,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      [BigNumber, BigNumber, BigNumber, BigNumber],
      boolean
    ] & {
      _name: string;
      _creator: string;
      _meltValue: BigNumber;
      _meltFeeRatio: number;
      _meltFeeMaxRatio: number;
      _supplyModel: string;
      _totalSupply: BigNumber;
      _circulatingSupply: BigNumber;
      _reserve: BigNumber;
      _transferable: number;
      _transferFeeData: [BigNumber, BigNumber, BigNumber, BigNumber];
      _nonFungible: boolean;
    }
  >;

  transferSettings(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber, BigNumber, BigNumber] & {
      _transferable: number;
      _transferFeeType: number;
      _transferFeeCurrency: BigNumber;
      _transferFeeValue: BigNumber;
      _transferFeeMaxValue: BigNumber;
    }
  >;

  isCreatorOf(
    _id: BigNumberish,
    _creator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelisted(
    _id: BigNumberish,
    _account: string,
    _whitelisted: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  mintableSupply(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  circulatingSupply(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(
    _id: BigNumberish,
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(_id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  symbol(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getERC20Adapter(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getERC721Adapter(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transfer(
    _to: string,
    _id: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransfer(
    _to: string,
    _id: BigNumberish,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAdapter(
    _to: string,
    _id: BigNumberish,
    _value: BigNumberish,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _id: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    _from: string,
    _to: string,
    _id: BigNumberish,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFromAdapter(
    _from: string,
    _to: string,
    _id: BigNumberish,
    _value: BigNumberish,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchTransfer(
    _to: string,
    _ids: BigNumberish[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransfer(
    _to: string,
    _ids: BigNumberish[],
    _values: BigNumberish[],
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchTransferFrom(
    _from: string,
    _to: string,
    _ids: BigNumberish[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    _from: string,
    _to: string,
    _ids: BigNumberish[],
    _values: BigNumberish[],
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicastTransfer(
    _to: string[],
    _ids: BigNumberish[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeMulticastTransfer(
    _to: string[],
    _ids: BigNumberish[],
    _values: BigNumberish[],
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicastTransferFrom(
    _from: string[],
    _to: string[],
    _ids: BigNumberish[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    _id: BigNumberish,
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _spender: string,
    _id: BigNumberish,
    _currentValue: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveAdapter(
    _spender: string,
    _id: BigNumberish,
    _currentValue: BigNumberish,
    _value: BigNumberish,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchApprove(
    _spender: string,
    _ids: BigNumberish[],
    _currentValues: BigNumberish[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApproval(
    _operator: string,
    _ids: BigNumberish[],
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    _operator: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalAdapter(
    _operator: string,
    _id: BigNumberish,
    _approved: boolean,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApproved(
    _owner: string,
    _operator: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferFees(
    _id: BigNumberish,
    _value: BigNumberish,
    _from: string,
    _to: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _transferValue: BigNumber;
      _minTransferValue: BigNumber;
      _transferFeeCurrency: BigNumber;
      _fee: BigNumber;
      _maxFee: BigNumber;
    }
  >;

  createTrade(
    _askingIds: BigNumberish[],
    _askingValues: BigNumberish[],
    _offeringIds: BigNumberish[],
    _offeringValues: BigNumberish[],
    _secondParty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tradeCompletable(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  completeTrade(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelTrade(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  melt(
    _ids: BigNumberish[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOf(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setURI(
    _id: BigNumberish,
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  nonFungibleCount(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonFungibleByIndex(
    _id: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonFungibleOfOwnerByIndex(
    _id: BigNumberish,
    _owner: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isNonFungible(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isContract(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  releaseERC20(
    _erc20ContractAddress: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseETH(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseERC721(
    _erc721ContractAddress: string,
    _to: string,
    _token: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseERC1155(
    _erc1155ContractAddress: string,
    _to: string,
    _id: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _storage: string,
    _oldContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retire(
    _nextContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    create(
      _name: string,
      _totalSupply: BigNumberish,
      _initialReserve: BigNumberish,
      _supplyModel: string,
      _meltValue: BigNumberish,
      _meltFeeRatio: BigNumberish,
      _transferable: BigNumberish,
      _transferFeeSettings: [BigNumberish, BigNumberish, BigNumberish],
      _nonFungible: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    minMeltValue(
      _initialReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintFungibles(
      _id: BigNumberish,
      _to: string[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintNonFungibles(
      _id: BigNumberish,
      _to: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintNonFungiblesWithData(
      _id: BigNumberish,
      _to: string[],
      _data: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    reserve(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    releaseReserve(
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateName(
      _id: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    assign(
      _id: BigNumberish,
      _creator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptAssignment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelisted(
      _id: BigNumberish,
      _account: string,
      _whitelisted: string,
      _on: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferable(
      _id: BigNumberish,
      _transferable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMeltFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseMaxMeltFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseMaxTransferFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployERC20Adapter(
      _id: BigNumberish,
      _decimals: BigNumberish,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    deployERC721Adapter(
      _id: BigNumberish,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    addLog(
      _id: BigNumberish,
      _data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    typeCount(overrides?: CallOverrides): Promise<BigNumber>;

    typeByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonFungibleTypeCount(overrides?: CallOverrides): Promise<BigNumber>;

    nonFungibleTypeByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fungibleTypeCount(overrides?: CallOverrides): Promise<BigNumber>;

    fungibleTypeByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    typeData(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        number,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        [BigNumber, BigNumber, BigNumber, BigNumber],
        boolean
      ] & {
        _name: string;
        _creator: string;
        _meltValue: BigNumber;
        _meltFeeRatio: number;
        _meltFeeMaxRatio: number;
        _supplyModel: string;
        _totalSupply: BigNumber;
        _circulatingSupply: BigNumber;
        _reserve: BigNumber;
        _transferable: number;
        _transferFeeData: [BigNumber, BigNumber, BigNumber, BigNumber];
        _nonFungible: boolean;
      }
    >;

    transferSettings(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber] & {
        _transferable: number;
        _transferFeeType: number;
        _transferFeeCurrency: BigNumber;
        _transferFeeValue: BigNumber;
        _transferFeeMaxValue: BigNumber;
      }
    >;

    isCreatorOf(
      _id: BigNumberish,
      _creator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelisted(
      _id: BigNumberish,
      _account: string,
      _whitelisted: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintableSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    circulatingSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      _id: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(_id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    symbol(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getERC20Adapter(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getERC721Adapter(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transfer(
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransfer(
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAdapter(
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromAdapter(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchTransfer(
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransfer(
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    batchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    multicastTransfer(
      _to: string[],
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    safeMulticastTransfer(
      _to: string[],
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    multicastTransferFrom(
      _from: string[],
      _to: string[],
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      _id: BigNumberish,
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _id: BigNumberish,
      _currentValue: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveAdapter(
      _spender: string,
      _id: BigNumberish,
      _currentValue: BigNumberish,
      _value: BigNumberish,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchApprove(
      _spender: string,
      _ids: BigNumberish[],
      _currentValues: BigNumberish[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setApproval(
      _operator: string,
      _ids: BigNumberish[],
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalAdapter(
      _operator: string,
      _id: BigNumberish,
      _approved: boolean,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApproved(
      _owner: string,
      _operator: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFees(
      _id: BigNumberish,
      _value: BigNumberish,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _transferValue: BigNumber;
        _minTransferValue: BigNumber;
        _transferFeeCurrency: BigNumber;
        _fee: BigNumber;
        _maxFee: BigNumber;
      }
    >;

    createTrade(
      _askingIds: BigNumberish[],
      _askingValues: BigNumberish[],
      _offeringIds: BigNumberish[],
      _offeringValues: BigNumberish[],
      _secondParty: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeCompletable(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeTrade(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancelTrade(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    melt(
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOf(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setURI(
      _id: BigNumberish,
      _uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    nonFungibleCount(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonFungibleByIndex(
      _id: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonFungibleOfOwnerByIndex(
      _id: BigNumberish,
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNonFungible(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isContract(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    releaseERC20(
      _erc20ContractAddress: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseETH(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseERC721(
      _erc721ContractAddress: string,
      _to: string,
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseERC1155(
      _erc1155ContractAddress: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _storage: string,
      _oldContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    retire(_nextContract: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(uint256,address,address,uint256)"(
      _id?: BigNumberish | null,
      _owner?: string | null,
      _spender?: string | null,
      _value?: null
    ): ApprovalEventFilter;
    Approval(
      _id?: BigNumberish | null,
      _owner?: string | null,
      _spender?: string | null,
      _value?: null
    ): ApprovalEventFilter;

    "Initialize(uint256,address,address)"(
      _block?: null,
      _storage?: null,
      _oldContract?: null
    ): InitializeEventFilter;
    Initialize(
      _block?: null,
      _storage?: null,
      _oldContract?: null
    ): InitializeEventFilter;

    "Retire(uint256,address)"(
      _block?: null,
      _nextContract?: null
    ): RetireEventFilter;
    Retire(_block?: null, _nextContract?: null): RetireEventFilter;

    "Log(uint256,address,string)"(
      _id?: BigNumberish | null,
      _from?: string | null,
      _data?: null
    ): LogEventFilter;
    Log(
      _id?: BigNumberish | null,
      _from?: string | null,
      _data?: null
    ): LogEventFilter;

    "UpdateDecimals(uint256)"(
      _id?: BigNumberish | null
    ): UpdateDecimalsEventFilter;
    UpdateDecimals(_id?: BigNumberish | null): UpdateDecimalsEventFilter;

    "UpdateName(uint256)"(_id?: BigNumberish | null): UpdateNameEventFilter;
    UpdateName(_id?: BigNumberish | null): UpdateNameEventFilter;

    "UpdateSymbol(uint256)"(_id?: BigNumberish | null): UpdateSymbolEventFilter;
    UpdateSymbol(_id?: BigNumberish | null): UpdateSymbolEventFilter;

    "SetURI(uint256,string)"(
      _id?: BigNumberish | null,
      _uri?: null
    ): SetURIEventFilter;
    SetURI(_id?: BigNumberish | null, _uri?: null): SetURIEventFilter;

    "Assign(uint256,address,address)"(
      _id?: BigNumberish | null,
      _from?: string | null,
      _to?: string | null
    ): AssignEventFilter;
    Assign(
      _id?: BigNumberish | null,
      _from?: string | null,
      _to?: string | null
    ): AssignEventFilter;

    "AcceptAssignment(uint256,address)"(
      _id?: BigNumberish | null,
      _creator?: string | null
    ): AcceptAssignmentEventFilter;
    AcceptAssignment(
      _id?: BigNumberish | null,
      _creator?: string | null
    ): AcceptAssignmentEventFilter;

    "Create(uint256,address,bool)"(
      _id?: BigNumberish | null,
      _creator?: string | null,
      _isNonFungible?: null
    ): CreateEventFilter;
    Create(
      _id?: BigNumberish | null,
      _creator?: string | null,
      _isNonFungible?: null
    ): CreateEventFilter;

    "Mint(uint256,uint256)"(
      _id?: BigNumberish | null,
      _value?: null
    ): MintEventFilter;
    Mint(_id?: BigNumberish | null, _value?: null): MintEventFilter;

    "UpdateMaxMeltFee(uint256)"(
      _id?: BigNumberish | null
    ): UpdateMaxMeltFeeEventFilter;
    UpdateMaxMeltFee(_id?: BigNumberish | null): UpdateMaxMeltFeeEventFilter;

    "UpdateMeltFee(uint256)"(
      _id?: BigNumberish | null
    ): UpdateMeltFeeEventFilter;
    UpdateMeltFee(_id?: BigNumberish | null): UpdateMeltFeeEventFilter;

    "OperatorApproval(address,address,uint256,bool)"(
      _owner?: string | null,
      _operator?: string | null,
      _id?: BigNumberish | null,
      _approved?: null
    ): OperatorApprovalEventFilter;
    OperatorApproval(
      _owner?: string | null,
      _operator?: string | null,
      _id?: BigNumberish | null,
      _approved?: null
    ): OperatorApprovalEventFilter;

    "Transfer(uint256,address,address,uint256)"(
      _id?: BigNumberish | null,
      _from?: string | null,
      _to?: string | null,
      _value?: null
    ): TransferEventFilter;
    Transfer(
      _id?: BigNumberish | null,
      _from?: string | null,
      _to?: string | null,
      _value?: null
    ): TransferEventFilter;

    "TransferFee(uint256,address,uint256,uint256)"(
      _id?: BigNumberish | null,
      _sender?: string | null,
      _feeId?: BigNumberish | null,
      _feeValue?: null
    ): TransferFeeEventFilter;
    TransferFee(
      _id?: BigNumberish | null,
      _sender?: string | null,
      _feeId?: BigNumberish | null,
      _feeValue?: null
    ): TransferFeeEventFilter;

    "UpdateMaxTransferFee(uint256)"(
      _id?: BigNumberish | null
    ): UpdateMaxTransferFeeEventFilter;
    UpdateMaxTransferFee(
      _id?: BigNumberish | null
    ): UpdateMaxTransferFeeEventFilter;

    "UpdateTransferable(uint256)"(
      _id?: BigNumberish | null
    ): UpdateTransferableEventFilter;
    UpdateTransferable(
      _id?: BigNumberish | null
    ): UpdateTransferableEventFilter;

    "UpdateTransferFee(uint256)"(
      _id?: BigNumberish | null
    ): UpdateTransferFeeEventFilter;
    UpdateTransferFee(_id?: BigNumberish | null): UpdateTransferFeeEventFilter;

    "Whitelist(uint256,address,address,bool)"(
      _id?: BigNumberish | null,
      _account?: string | null,
      _whitelisted?: null,
      _on?: null
    ): WhitelistEventFilter;
    Whitelist(
      _id?: BigNumberish | null,
      _account?: string | null,
      _whitelisted?: null,
      _on?: null
    ): WhitelistEventFilter;

    "Melt(uint256,address,uint256)"(
      _id?: BigNumberish | null,
      _owner?: string | null,
      _value?: null
    ): MeltEventFilter;
    Melt(
      _id?: BigNumberish | null,
      _owner?: string | null,
      _value?: null
    ): MeltEventFilter;

    "DeployERCAdapter(uint256,address)"(
      _id?: BigNumberish | null,
      _sender?: string | null
    ): DeployERCAdapterEventFilter;
    DeployERCAdapter(
      _id?: BigNumberish | null,
      _sender?: string | null
    ): DeployERCAdapterEventFilter;

    "CreateTrade(uint256,address,address,uint256)"(
      _tradeId?: BigNumberish | null,
      _firstParty?: string | null,
      _secondParty?: string | null,
      _escrowedEnjFirstParty?: null
    ): CreateTradeEventFilter;
    CreateTrade(
      _tradeId?: BigNumberish | null,
      _firstParty?: string | null,
      _secondParty?: string | null,
      _escrowedEnjFirstParty?: null
    ): CreateTradeEventFilter;

    "CompleteTrade(uint256,address,address,uint256,uint256,uint256)"(
      _tradeId?: BigNumberish | null,
      _firstParty?: string | null,
      _secondParty?: string | null,
      _receivedEnjFirstParty?: null,
      _changeEnjFirstParty?: null,
      _receivedEnjSecondParty?: null
    ): CompleteTradeEventFilter;
    CompleteTrade(
      _tradeId?: BigNumberish | null,
      _firstParty?: string | null,
      _secondParty?: string | null,
      _receivedEnjFirstParty?: null,
      _changeEnjFirstParty?: null,
      _receivedEnjSecondParty?: null
    ): CompleteTradeEventFilter;

    "CancelTrade(uint256,address,uint256)"(
      _tradeId?: BigNumberish | null,
      _firstParty?: string | null,
      _receivedEnjFirstParty?: null
    ): CancelTradeEventFilter;
    CancelTrade(
      _tradeId?: BigNumberish | null,
      _firstParty?: string | null,
      _receivedEnjFirstParty?: null
    ): CancelTradeEventFilter;
  };

  estimateGas: {
    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      _name: string,
      _totalSupply: BigNumberish,
      _initialReserve: BigNumberish,
      _supplyModel: string,
      _meltValue: BigNumberish,
      _meltFeeRatio: BigNumberish,
      _transferable: BigNumberish,
      _transferFeeSettings: [BigNumberish, BigNumberish, BigNumberish],
      _nonFungible: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minMeltValue(
      _initialReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintFungibles(
      _id: BigNumberish,
      _to: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintNonFungibles(
      _id: BigNumberish,
      _to: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintNonFungiblesWithData(
      _id: BigNumberish,
      _to: string[],
      _data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    releaseReserve(
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateName(
      _id: BigNumberish,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assign(
      _id: BigNumberish,
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptAssignment(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelisted(
      _id: BigNumberish,
      _account: string,
      _whitelisted: string,
      _on: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferable(
      _id: BigNumberish,
      _transferable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMeltFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseMaxMeltFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseMaxTransferFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployERC20Adapter(
      _id: BigNumberish,
      _decimals: BigNumberish,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployERC721Adapter(
      _id: BigNumberish,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLog(
      _id: BigNumberish,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    typeCount(overrides?: CallOverrides): Promise<BigNumber>;

    typeByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonFungibleTypeCount(overrides?: CallOverrides): Promise<BigNumber>;

    nonFungibleTypeByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fungibleTypeCount(overrides?: CallOverrides): Promise<BigNumber>;

    fungibleTypeByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    typeData(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferSettings(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCreatorOf(
      _id: BigNumberish,
      _creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelisted(
      _id: BigNumberish,
      _account: string,
      _whitelisted: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintableSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    circulatingSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      _id: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getERC20Adapter(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getERC721Adapter(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransfer(
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAdapter(
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFromAdapter(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchTransfer(
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransfer(
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicastTransfer(
      _to: string[],
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeMulticastTransfer(
      _to: string[],
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicastTransferFrom(
      _from: string[],
      _to: string[],
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      _id: BigNumberish,
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _id: BigNumberish,
      _currentValue: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveAdapter(
      _spender: string,
      _id: BigNumberish,
      _currentValue: BigNumberish,
      _value: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchApprove(
      _spender: string,
      _ids: BigNumberish[],
      _currentValues: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApproval(
      _operator: string,
      _ids: BigNumberish[],
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalAdapter(
      _operator: string,
      _id: BigNumberish,
      _approved: boolean,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApproved(
      _owner: string,
      _operator: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFees(
      _id: BigNumberish,
      _value: BigNumberish,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTrade(
      _askingIds: BigNumberish[],
      _askingValues: BigNumberish[],
      _offeringIds: BigNumberish[],
      _offeringValues: BigNumberish[],
      _secondParty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tradeCompletable(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeTrade(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelTrade(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    melt(
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOf(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setURI(
      _id: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nonFungibleCount(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonFungibleByIndex(
      _id: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonFungibleOfOwnerByIndex(
      _id: BigNumberish,
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNonFungible(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContract(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    releaseERC20(
      _erc20ContractAddress: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseETH(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseERC721(
      _erc721ContractAddress: string,
      _to: string,
      _token: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseERC1155(
      _erc1155ContractAddress: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _storage: string,
      _oldContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retire(
      _nextContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      _name: string,
      _totalSupply: BigNumberish,
      _initialReserve: BigNumberish,
      _supplyModel: string,
      _meltValue: BigNumberish,
      _meltFeeRatio: BigNumberish,
      _transferable: BigNumberish,
      _transferFeeSettings: [BigNumberish, BigNumberish, BigNumberish],
      _nonFungible: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minMeltValue(
      _initialReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintFungibles(
      _id: BigNumberish,
      _to: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintNonFungibles(
      _id: BigNumberish,
      _to: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintNonFungiblesWithData(
      _id: BigNumberish,
      _to: string[],
      _data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseReserve(
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateName(
      _id: BigNumberish,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assign(
      _id: BigNumberish,
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptAssignment(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelisted(
      _id: BigNumberish,
      _account: string,
      _whitelisted: string,
      _on: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferable(
      _id: BigNumberish,
      _transferable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMeltFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseMaxMeltFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseMaxTransferFee(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployERC20Adapter(
      _id: BigNumberish,
      _decimals: BigNumberish,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployERC721Adapter(
      _id: BigNumberish,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLog(
      _id: BigNumberish,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    typeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    typeByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonFungibleTypeCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonFungibleTypeByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fungibleTypeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fungibleTypeByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    typeData(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferSettings(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCreatorOf(
      _id: BigNumberish,
      _creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelisted(
      _id: BigNumberish,
      _account: string,
      _whitelisted: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintableSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    circulatingSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _id: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getERC20Adapter(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getERC721Adapter(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransfer(
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAdapter(
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFromAdapter(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchTransfer(
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransfer(
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicastTransfer(
      _to: string[],
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeMulticastTransfer(
      _to: string[],
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicastTransferFrom(
      _from: string[],
      _to: string[],
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      _id: BigNumberish,
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _id: BigNumberish,
      _currentValue: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveAdapter(
      _spender: string,
      _id: BigNumberish,
      _currentValue: BigNumberish,
      _value: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchApprove(
      _spender: string,
      _ids: BigNumberish[],
      _currentValues: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApproval(
      _operator: string,
      _ids: BigNumberish[],
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalAdapter(
      _operator: string,
      _id: BigNumberish,
      _approved: boolean,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApproved(
      _owner: string,
      _operator: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFees(
      _id: BigNumberish,
      _value: BigNumberish,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createTrade(
      _askingIds: BigNumberish[],
      _askingValues: BigNumberish[],
      _offeringIds: BigNumberish[],
      _offeringValues: BigNumberish[],
      _secondParty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tradeCompletable(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeTrade(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelTrade(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    melt(
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setURI(
      _id: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonFungibleCount(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonFungibleByIndex(
      _id: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonFungibleOfOwnerByIndex(
      _id: BigNumberish,
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNonFungible(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContract(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseERC20(
      _erc20ContractAddress: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseETH(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseERC721(
      _erc721ContractAddress: string,
      _to: string,
      _token: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseERC1155(
      _erc1155ContractAddress: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _storage: string,
      _oldContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retire(
      _nextContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
