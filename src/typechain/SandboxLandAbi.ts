/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SandboxLandAbiInterface extends utils.Interface {
  contractName: "SandboxLandAbi";
  functions: {
    "supportsInterface(bytes4)": FunctionFragment;
    "name()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "height()": FunctionFragment;
    "batchTransferFrom(address,address,uint256[],bytes)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],bytes)": FunctionFragment;
    "approveFor(address,address,uint256)": FunctionFragment;
    "transferQuad(address,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "x(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "y(uint256)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "isSuperOperator(address)": FunctionFragment;
    "mintQuad(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "_numNFTPerAddress(address)": FunctionFragment;
    "setMetaTransactionProcessor(address,bool)": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "_owners(uint256)": FunctionFragment;
    "_operatorsForAll(address,address)": FunctionFragment;
    "width()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "setSuperOperator(address,bool)": FunctionFragment;
    "_operators(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "setMinter(address,bool)": FunctionFragment;
    "isMetaTransactionProcessor(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": FunctionFragment;
    "setApprovalForAllFor(address,address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "height", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchTransferFrom",
    values: [string, string, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveFor",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferQuad",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "x", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "y", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSuperOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintQuad",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_numNFTPerAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaTransactionProcessor",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_operatorsForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "width", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSuperOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_operators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isMetaTransactionProcessor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferQuad",
    values: [
      string,
      string,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAllFor",
    values: [string, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "height", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approveFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferQuad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "x", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "y", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSuperOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintQuad", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_numNFTPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetaTransactionProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_operatorsForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "width", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSuperOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMetaTransactionProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferQuad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAllFor",
    data: BytesLike
  ): Result;

  events: {
    "Minter(address,bool)": EventFragment;
    "MetaTransactionProcessor(address,bool)": EventFragment;
    "SuperOperator(address,bool)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Minter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionProcessor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
}

export type MinterEvent = TypedEvent<
  [string, boolean],
  { superOperator: string; enabled: boolean }
>;

export type MinterEventFilter = TypedEventFilter<MinterEvent>;

export type MetaTransactionProcessorEvent = TypedEvent<
  [string, boolean],
  { metaTransactionProcessor: string; enabled: boolean }
>;

export type MetaTransactionProcessorEventFilter =
  TypedEventFilter<MetaTransactionProcessorEvent>;

export type SuperOperatorEvent = TypedEvent<
  [string, boolean],
  { superOperator: string; enabled: boolean }
>;

export type SuperOperatorEventFilter = TypedEventFilter<SuperOperatorEvent>;

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { oldAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { _from: string; _to: string; _tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { _owner: string; _approved: string; _tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { _owner: string; _operator: string; _approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface SandboxLandAbi extends BaseContract {
  contractName: "SandboxLandAbi";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SandboxLandAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    supportsInterface(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    getApproved(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    approve(
      operator: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    height(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveFor(
      sender: string,
      operator: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferQuad(
      from: string,
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    x(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      metaTransactionContract: string,
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    y(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    isSuperOperator(who: string, overrides?: CallOverrides): Promise<[boolean]>;

    mintQuad(
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burnFrom(
      from: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _numNFTPerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setMetaTransactionProcessor(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    _owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _operatorsForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    width(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isMinter(who: string, overrides?: CallOverrides): Promise<[boolean]>;

    setSuperOperator(
      superOperator: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _operators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenURI(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setMinter(
      minter: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isMetaTransactionProcessor(
      who: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOperator: boolean }>;

    batchTransferQuad(
      from: string,
      to: string,
      sizes: BigNumberish[],
      xs: BigNumberish[],
      ys: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAllFor(
      sender: string,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  supportsInterface(id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  getApproved(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  approve(
    operator: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  height(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveFor(
    sender: string,
    operator: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferQuad(
    from: string,
    to: string,
    size: BigNumberish,
    x: BigNumberish,
    y: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  x(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    metaTransactionContract: string,
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  y(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  isSuperOperator(who: string, overrides?: CallOverrides): Promise<boolean>;

  mintQuad(
    to: string,
    size: BigNumberish,
    x: BigNumberish,
    y: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burnFrom(
    from: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _numNFTPerAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setMetaTransactionProcessor(
    metaTransactionProcessor: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  _owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  _operatorsForAll(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  width(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isMinter(who: string, overrides?: CallOverrides): Promise<boolean>;

  setSuperOperator(
    superOperator: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _operators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenURI(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setMinter(
    minter: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isMetaTransactionProcessor(
    who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  batchTransferQuad(
    from: string,
    to: string,
    sizes: BigNumberish[],
    xs: BigNumberish[],
    ys: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAllFor(
    sender: string,
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    supportsInterface(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    getApproved(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    approve(
      operator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    height(overrides?: CallOverrides): Promise<BigNumber>;

    batchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    approveFor(
      sender: string,
      operator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferQuad(
      from: string,
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    x(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    initialize(
      metaTransactionContract: string,
      admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    y(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    isSuperOperator(who: string, overrides?: CallOverrides): Promise<boolean>;

    mintQuad(
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnFrom(
      from: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _numNFTPerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMetaTransactionProcessor(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    _owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _operatorsForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    width(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    isMinter(who: string, overrides?: CallOverrides): Promise<boolean>;

    setSuperOperator(
      superOperator: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    _operators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenURI(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setMinter(
      minter: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    isMetaTransactionProcessor(
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    batchTransferQuad(
      from: string,
      to: string,
      sizes: BigNumberish[],
      xs: BigNumberish[],
      ys: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAllFor(
      sender: string,
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Minter(address,bool)"(
      superOperator?: null,
      enabled?: null
    ): MinterEventFilter;
    Minter(superOperator?: null, enabled?: null): MinterEventFilter;

    "MetaTransactionProcessor(address,bool)"(
      metaTransactionProcessor?: null,
      enabled?: null
    ): MetaTransactionProcessorEventFilter;
    MetaTransactionProcessor(
      metaTransactionProcessor?: null,
      enabled?: null
    ): MetaTransactionProcessorEventFilter;

    "SuperOperator(address,bool)"(
      superOperator?: null,
      enabled?: null
    ): SuperOperatorEventFilter;
    SuperOperator(
      superOperator?: null,
      enabled?: null
    ): SuperOperatorEventFilter;

    "AdminChanged(address,address)"(
      oldAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(oldAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    "Transfer(address,address,uint256)"(
      _from?: string | null,
      _to?: string | null,
      _tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      _from?: string | null,
      _to?: string | null,
      _tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "Approval(address,address,uint256)"(
      _owner?: string | null,
      _approved?: string | null,
      _tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      _owner?: string | null,
      _approved?: string | null,
      _tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      _owner?: string | null,
      _operator?: string | null,
      _approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      _owner?: string | null,
      _operator?: string | null,
      _approved?: null
    ): ApprovalForAllEventFilter;
  };

  estimateGas: {
    supportsInterface(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      operator: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    height(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveFor(
      sender: string,
      operator: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferQuad(
      from: string,
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    x(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      metaTransactionContract: string,
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    y(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isSuperOperator(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintQuad(
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnFrom(
      from: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _numNFTPerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMetaTransactionProcessor(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    _owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _operatorsForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    width(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isMinter(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    setSuperOperator(
      superOperator: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _operators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setMinter(
      minter: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isMetaTransactionProcessor(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchTransferQuad(
      from: string,
      to: string,
      sizes: BigNumberish[],
      xs: BigNumberish[],
      ys: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAllFor(
      sender: string,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    supportsInterface(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      operator: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    height(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveFor(
      sender: string,
      operator: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferQuad(
      from: string,
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    x(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      metaTransactionContract: string,
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    y(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSuperOperator(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintQuad(
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnFrom(
      from: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _numNFTPerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMetaTransactionProcessor(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _operatorsForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    width(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isMinter(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSuperOperator(
      superOperator: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _operators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMinter(
      minter: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isMetaTransactionProcessor(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchTransferQuad(
      from: string,
      to: string,
      sizes: BigNumberish[],
      xs: BigNumberish[],
      ys: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAllFor(
      sender: string,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
